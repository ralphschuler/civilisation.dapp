name: Deploy Contracts

on:
  push:
    branches: [main]
    paths:
      - 'contracts/**'
      - '.github/workflows/deploy-contracts.yml'
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  deployments: write

concurrency:
  group: 'deploy-contracts'
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: testnet

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Dependencies
        working-directory: contracts
        run: |
          forge install worldcoin/world-id-contracts
          forge install foundry-rs/forge-std
          forge build

      - name: Deploy Contracts
        working-directory: contracts
        env:
          PRIVATE_KEY: ${{ secrets.WORLDCHAIN_WALLET_PRIVATE_KEY }}
          RPC_URL: ${{ vars.WORLDCHAIN_RPC_URL }}
          WORLD_APP_ID: ${{ vars.WORLD_APP_ID }}
          WORLD_ACTION: test-action
          WORLD_ID_ROUTER: ${{ vars.WORLD_ID_ROUTER }}
        run: |
          forge create src/Contract.sol:Contract \
            --rpc-url "$RPC_URL" \
            --private-key "$PRIVATE_KEY" \
            --broadcast \
            -vvvv \
             --constructor-args $WORLD_ID_ROUTER $WORLD_APP_ID $WORLD_ACTION

      - name: Extract Deployed Address
        id: extract
        working-directory: contracts
        run: |
          FILE="broadcast/Deploy.s.sol/${{ vars.CHAIN_ID }}/run-latest.json"
          test -f "$FILE" || { echo "Broadcast file not found: $FILE"; exit 1; }

          ADDR=$(jq -r '[.receipts[] | select(.contractAddress != null) | .contractAddress][0]' "$FILE")
          if [ -z "$ADDR" ] || [ "$ADDR" = "null" ]; then
            # Fallback: aus transactions mit CREATE
            ADDR=$(jq -r '[.transactions[] | select(.transactionType=="CREATE" or .transactionType=="CREATE2") | .contractAddress][0]' "$FILE")
          fi

          if [ -z "$ADDR" ] || [ "$ADDR" = "null" ]; then
            echo "Could not extract contract address from $FILE"
            exit 1
          fi

          echo "Contract address: $ADDR"
          echo "contract_address=$ADDR" >> "$GITHUB_OUTPUT"

      # - name: Verify Contracts
      #   working-directory: contracts
      #   env:
      #     PRIVATE_KEY: ${{ secrets.WORLDCHAIN_WALLET_PRIVATE_KEY }}
      #     RPC_URL: ${{ vars.WORLDCHAIN_RPC_URL }}
      #     WORLD_APP_ID: ${{ vars.WORLD_APP_ID }}
      #     WORLD_ACTION: test-action
      #     WORLD_ROUTER: ${{ vars.WORLD_ID_ROUTER }}
      #     ETHERSCAN_API_KEY: ${{ secrets.WORLDSCAN_API_KEY }}
      #     APP_CONTRACT_ADDRESS: ${{ steps.extract.outputs.contract_address }}
      #   run: |
      #     forge verify-contract $APP_CONTRACT_ADDRESS src/TribalGame.sol:TribalGame \
      #       --chain-id ${{ vars.CHAIN_ID }} \
      #       --etherscan-api-key "$ETHERSCAN_API_KEY"

      - name: Ensure Environment exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}" \
            -f wait_timer=0 >/dev/null

      - name: Save address as GitHub Environment variable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          APP_CONTRACT_ADDRESS: ${{ steps.extract.outputs.contract_address }}
        run: |
          set -e
          if ! gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables/APP_CONTRACT_ADDRESS" \
            -f name="APP_CONTRACT_ADDRESS" \
            -f value="$APP_CONTRACT_ADDRESS" >/dev/null 2>&1; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables" \
              -f name="APP_CONTRACT_ADDRESS" \
              -f value="$APP_CONTRACT_ADDRESS" >/dev/null
          fi
          echo "Saved APP_CONTRACT_ADDRESS=$APP_CONTRACT_ADDRESS to environment '$ENVIRONMENT'"

      - name: Expose address as job output
        id: expose
        run: |
          echo "contract_address=${{ steps.extract.outputs.contract_address }}" >> "$GITHUB_OUTPUT"
