name: Deploy Diamond

on:
  push:
    branches: [main]
    paths:
      - "contracts/**"
      - ".github/workflows/deploy-contracts.yml"
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  deployments: write

concurrency:
  group: "deploy-contracts"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: testnet

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Dependencies
        working-directory: contracts
        run: |
          forge install worldcoin/world-id-contracts
          forge install foundry-rs/forge-std
          forge build

      - name: Deploy Diamond (Proxy + Facets)
        working-directory: contracts
        env:
          PRIVATE_KEY: ${{ secrets.WORLDCHAIN_WALLET_PRIVATE_KEY }}
          RPC_URL: ${{ vars.WORLDCHAIN_RPC_URL }}
        run: |
          forge script script/DeployDiamond.s.sol:DeployDiamond \
            --rpc-url "$RPC_URL" \
            --private-key "$PRIVATE_KEY" \
            --broadcast \
            -vvvv

      - name: Extract Diamond Address
        id: extract
        working-directory: contracts
        run: |
          FILE="broadcast/DeployDiamond.s.sol/${{ vars.CHAIN_ID }}/run-latest.json"
          test -f "$FILE" || { echo "Broadcast file not found: $FILE"; exit 1; }

          # Extract Diamond Address (der erste CREATE für Diamond)
          DIAMOND=$(jq -r '.transactions[] | select(.contractName=="Diamond") | .contractAddress' "$FILE" | head -n1)

          if [ -z "$DIAMOND" ] || [ "$DIAMOND" = "null" ]; then
            echo "❌ Could not extract Diamond address"
            exit 1
          fi

          echo "Diamond address: $DIAMOND"
          echo "diamond_address=$DIAMOND" >> "$GITHUB_OUTPUT"

          # Optional: log all other facets
          echo "Deployed Facets:"
          jq -r '.transactions[] | select(.contractName!="Diamond" and .contractAddress != null) | "\(.contractName): \(.contractAddress)"' "$FILE" || true

      - name: Save Diamond Address as GitHub Environment variable
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENVIRONMENT: testnet
          DIAMOND_ADDR: ${{ steps.extract.outputs.diamond_address }}
        run: |
          set -e
          if ! gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            -f name="APP_CONTRACT_ADDRESS" \
            -f value="$DIAMOND_ADDR" \
            "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables/APP_CONTRACT_ADDRESS" \
            >/dev/null 2>&1; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -f name="APP_CONTRACT_ADDRESS" \
              -f value="$DIAMOND_ADDR" \
              "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables" \
              >/dev/null
          fi
          echo "✅ Saved APP_CONTRACT_ADDRESS=$DIAMOND_ADDR to environment '$ENVIRONMENT'"

      - name: Expose Diamond Address as job output
        id: expose
        run: |
          echo "contract_address=${{ steps.extract.outputs.diamond_address }}" >> "$GITHUB_OUTPUT"
