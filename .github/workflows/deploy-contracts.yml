name: Deploy Contracts

on:
  release:
    types: [published, released]
  workflow_dispatch:
    inputs:
      environment:
        description: 'GitHub environment to deploy the contracts to'
        required: true
        type: choice
        options:
          - testnet
          - mainnet

permissions:
  contents: read
  deployments: write
  id-token: write

concurrency:
  group: deploy-contracts-${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.event_name == 'release' && github.event.release.prerelease && 'testnet' || 'mainnet' }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.event_name == 'release' && github.event.release.prerelease && 'testnet' || 'mainnet' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Dependencies
        working-directory: contracts
        run: |
          forge install worldcoin/world-id-contracts
          forge install foundry-rs/forge-std
          forge build

      - name: Deploy Contracts
        working-directory: contracts
        env:
          PRIVATE_KEY: ${{ secrets.WORLDCHAIN_WALLET_PRIVATE_KEY }}
          RPC_URL: ${{ vars.WORLDCHAIN_RPC_URL }}
        run: |
          set -euo pipefail

          for file in $(ls script/*.s.sol | sort); do
            raw=$(basename "$file" .s.sol)
            base=$(echo "$raw" | sed -E 's/^[0-9]+_//')

            echo ">>> Running forge script for $file (contract: $base)"
            forge script "$file:$base" \
              --rpc-url "$RPC_URL" \
              --private-key "$PRIVATE_KEY" \
              --broadcast \
              -vvvv
          done

      - name: Extract Diamond Address
        id: extract
        working-directory: contracts
        run: |
          FILE="broadcast/00_Deploy.s.sol/${{ vars.CHAIN_ID }}/run-latest.json"
          test -f "$FILE" || { echo "Broadcast file not found: $FILE"; exit 1; }

          DIAMOND=$(jq -r '.transactions[] | select(.transactionType=="CREATE" and .contractName=="Diamond") | .contractAddress' "$FILE" | head -n1)

          if [ -z "$DIAMOND" ] || [ "$DIAMOND" = "null" ]; then
            echo "❌ Could not extract Diamond address"
            exit 1
          fi

          echo "Diamond address: $DIAMOND"
          echo "diamond_address=$DIAMOND" >> "$GITHUB_OUTPUT"

      - name: Save Diamond Address as GitHub Environment variable
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.event_name == 'release' && github.event.release.prerelease && 'testnet' || 'mainnet' }}
          DIAMOND_ADDR: ${{ steps.extract.outputs.diamond_address }}
        run: |
          set -e
          if gh api \
            --method GET \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables/APP_CONTRACT_ADDRESS" \
            >/dev/null 2>&1; then
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -f value="$DIAMOND_ADDR" \
              "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables/APP_CONTRACT_ADDRESS"
          else
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -f name="APP_CONTRACT_ADDRESS" \
              -f value="$DIAMOND_ADDR" \
              "/repos/${GITHUB_REPOSITORY}/environments/${ENVIRONMENT}/variables"
          fi
          echo "✅ Saved APP_CONTRACT_ADDRESS=$DIAMOND_ADDR to environment '$ENVIRONMENT'"

      - name: Collect all ABIs
        working-directory: contracts
        run: |
          mkdir -p /tmp/abi
          rsync -avR \
            --include '*/' \
            --include '*.json' \
            --exclude '*' \
            ./out/ ./broadcast/ /tmp/abi/

      - name: Upload ABIs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Diamond-ABIs
          path: /tmp/abi/
